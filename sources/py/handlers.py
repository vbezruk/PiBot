import datetime
import subprocess
import sys
import time
import os
from math import ceil
from aiogram.types import *
import sources.py.accesses as accesses
import sources.py.chats as chats
import sources.py.commands as commands
import sources.py.keyboard as keyboard
import sources.py.logs as logs
import sources.py.messages as messages
import sources.py.schedule_func as schedule_func
import sources.py.users as users
from main import bot, dp, client
from sources.py.config import *
from sources.py.schedule import *

async def registerMessage(message: Message):
    await message.answer(text=f"üÜï{message.from_user.first_name}, –í–∏ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, ‚úçÔ∏è –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start")


async def noAccessMessage(message: Message):
    await message.answer(text=f"‚õîÔ∏è{message.from_user.first_name}, –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏")


async def invalidGroupMessage(message: Message):
    await message.answer(
        text=f"‚ÅâÔ∏è{message.from_user.first_name}, —É –í–∞—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–∞, ‚úçÔ∏è –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /setgroup (–≤–∞—à–∞ –≥—Ä—É–ø–∞)")

async def send_to_admin(dp):
    logs.writeLog('Bot started')

    await bot.send_message(chat_id=admin_id, text="Bot started!")


async def mDebug(message: Message):
    log_text = f"message = {message.text} username = @{message.from_user.username} name = {message.from_user.first_name} chat_id = {message.chat.id} user_id = {message.from_user.id}"

    logs.writeLog(log_text)

    await bot.send_message(chat_id=admin_id,
                           text=f"Debug[{message.date}]:\n \tmessage = {message.text}\n \tusername = @{message.from_user.username}\n \tname = {message.from_user.first_name}")

@dp.message_handler(commands=['start'])
async def echo(message: Message):
    await mDebug(message)

    # await bot.send_message(chat_id=message.chat.id, text="–ö–Ω–æ–ø–∫–∏:", reply_markup=keyboard.keyboard)

    if users.checkUser(message.from_user.id) == False:
        users.addUser('user', message.from_user.id, 'None')

    await message.answer(
        text=f"üëã–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}.\n‚úçÔ∏è–í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ [/help] –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")

@dp.message_handler(commands=['help'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/help') == False:
        await noAccessMessage(message)
        return 0

    if len(message.text) > len("/help "):
        page = int(message.text.replace("/help ", ""))
    else:
        page = 0

    access = users.getAccess(message.from_user.id)

    descriptions = commands.getDescriptions(access)

    count = commands.countCommands(access)

    max_page = ceil(float(count) / commands_page)

    if page + 1 > max_page:
        await message.answer(text='–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏!')
        return

    i = page * commands_page

    answer = 'üìú–û–ø–∏—Å –¥–æ—Å—Ç—É–Ω–∏—Ö –í–∞–º –∫–æ–º–∞–Ω–¥:\n'

    while i < (page + 1) * commands_page and i < count:
        answer += descriptions[i]
        i = i + 1

    if (page > 0):
        if page - 1 != 0:
            answer += f'–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞: /help {page - 1}\n'
        else:
            answer += '–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞: /help\n'
    if not page + 2 > max_page:
        answer += f'–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: /help {page + 1}\n'

    await message.answer(text=answer)

@dp.message_handler(commands=['about'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/about') == False:
        await noAccessMessage(message)
        return 0

    await message.answer(
        text='–¶–µ–π –±–æ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –°—É–º—Å—å–∫–æ–≥–æ –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É. ' +
             '–ë–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î —Å—Ç—É–¥–µ–Ω—Ç–∞–º –°—É–º–î–£ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å —É —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç—ñ. ' +
             '–ë–æ—Ç –º–æ–∂–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è –¥–æ —ó—Ö –ø–æ—á–∞—Ç–∫—É. ' +
             '–í—ñ–Ω —Ç–∞–∫–æ–∂ –≤–º—ñ—î —Ä–æ–∑–≤‚Äô—è–∑—É–≤–∞—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ —ñ –∑–Ω–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –¥–µ—è–∫—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. ' +
             '–ù–∞–¥–∞–ª—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±—É–¥–µ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏—Å—è.\n' +
             '–ê–≤—Ç–æ—Ä–∏: @vladyslavbezruk —ñ @starlord0208\n'
             'GitHub: https://github.com/vladyslavbezruk —ñ https://github.com/Ilya-Piskurov'
    )

@dp.message_handler(commands=['calc'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/calc') == False:
        await noAccessMessage(message)
        return 0

    query = message.text.replace("/calc ", "")
    res = client.query(query)
    output = next(res.results).text

    await message.answer(text=output)

@dp.message_handler(commands=['getjson'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getjson') == False:
        await noAccessMessage(message)
        return 0

    for schedule in scheduleFilePath:
        logs.writeLog('Sended jsons')

        await bot.send_document(chat_id=message.chat.id, document=open(scheduleFilePath[schedule], 'rb'))

        time.sleep(1)

@dp.message_handler(commands=['restart'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/restart') == False:
        await noAccessMessage(message)
        return 0

    await message.answer(text=f"Restarting ...")

    accesses.save(accesses.accessesFilePath)
    users.save(users.usersFilePath)

    logs.writeLog('Restaring ...')

@dp.message_handler(commands=['update'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/update') == False:
        await noAccessMessage(message)
        return 0

    result = groups.update()

    logs.writeLog(result)

    schedule_func.load()

    await message.answer(text=result)

@dp.message_handler(commands=['getSource'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getSource') == False:
        await noAccessMessage(message)
        return 0

    logs.writeLog('Sended sources')

    subprocess.call([f'./{createSource}'])
    await bot.send_document(chat_id=message.chat.id, document=open('../../PiBot.zip', 'rb'))
    subprocess.call([f'./{removeSource}'])

def compare(a, b, size):
    for i in range(size):
        if a[i] != b[i]:
            return False

    return True

@dp.message_handler(commands=['shutdown'])
async def echohelp(message: Message):
    await mDebug(message)

    time = datetime.now()

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/shutdown') == False:
        await noAccessMessage(message)
        return 0

    if compare(str(time), str(message.date), 18):
        await message.answer(text="Goodbye ...")

        accesses.save(accesses.accessesFilePath)
        users.save(users.usersFilePath)

        logs.writeLog('Shutdown ...')

        sys.exit(0)
        return

@dp.message_handler(commands=['getAccess'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getAccess') == False:
        await noAccessMessage(message)
        return 0

    access = users.getAccess(message.from_user.id)
    await message.answer(text=f"Your access level - {access}")

@dp.message_handler(commands=['getCommands'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getCommands') == False:
        await noAccessMessage(message)
        return 0

    commands = accesses.getCommands(users.getAccess(message.from_user.id))

    await message.answer(text=commands)

@dp.message_handler(commands=['getCommandsAccess'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getCommandsAccess') == False:
        await noAccessMessage(message)
        return 0

    commands = accesses.getCommands(message.text.replace("/getCommandsAccess ", ""))

    await message.answer(text=commands)

@dp.message_handler(commands=['save'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/save') == False:
        await noAccessMessage(message)
        return 0

    logs.writeLog('Saving data ...')

    accesses.save(accesses.accessesFilePath)
    users.save(users.usersFilePath)

    await message.answer(text="All saved!")

@dp.message_handler(commands=['setgroup'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/setgroup') == False:
        await noAccessMessage(message)
        return 0

    group = message.text.replace("/setgroup ", "")

    if (not groups.checkGroup(group)):
        await message.answer(text=f"‚ÅâÔ∏è{message.from_user.first_name}, –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –≥—Ä—É–ø–∏")
        return 0

    users.set(users.getAccess(message.from_user.id), message.from_user.id, 'group', str(group))

    await message.answer(text=f"‚ÄºÔ∏è–ó–∞—Ä–∞–∑ –í–∞—à–∞ –≥—Ä—É–ø–∞ - {group}")

@dp.message_handler(commands=['setLink'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/setLink') == False:
        await noAccessMessage(message)
        return 0

    args = message.text.replace("/setLink ", "").split(", ")
    group = args[0]
    subject = args[1]
    link = args[2]

    if (not groups.checkGroup(group)):
        await message.answer(text=f"‚ÅâÔ∏è{message.from_user.first_name}, –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –≥—Ä—É–ø–∏")
        return 0

    groups.setLink(group, subject, link)

    await message.answer(text=f"‚ÄºÔ∏è–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@dp.message_handler(commands=['getid'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/getid') == False:
        await noAccessMessage(message)
        return 0

    await message.answer(text=f"Your id - {str(message.from_user.id)}")

@dp.message_handler(commands=['addGroup'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/addGroup') == False:
        await noAccessMessage(message)
        return 0

    group = str(message.text.replace("/addGroup ", ""))
    chat_id = str(message.chat.id)

    if (not groups.checkGroup(group)):
        await message.answer(text=f"–ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≥—Ä—É–ø–∏ —è–∫ {group}")
        return
    if chats.checkGroup(chat_id, group) == False:
        chats.addGroup(chat_id, group)
        await message.answer(text=f"–ì—Ä—É–ø–∞ {group} –¥–æ–¥–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ")
    else:
        await message.answer(text=f"–ì—Ä—É–ø–∞ {group} –≤–∂–µ –±—É–ª–∞ –¥–æ–¥–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ")

@dp.message_handler(commands=['removeGroup'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/removeGroup') == False:
        await noAccessMessage(message)
        return 0

    group = str(message.text.replace("/removeGroup ", ""))
    chat_id = str(message.chat.id)

    if chats.checkGroup(chat_id, group) == True:
        chats.removeGroup(chat_id, group)
        await message.answer(text=f"–ì—Ä—É–ø–∞ {group} –≤–∏–¥–∞–ª–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ")
    else:
        await message.answer(text=f"–ì—Ä—É–ø–∞ {group} –≤–∂–µ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ")

@dp.message_handler(commands=['now'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/now') == False:
        await noAccessMessage(message)
        return 0

    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    group = groups.getCode(str(group))

    result = help_get_url(str(group))

    await message.answer(result)

@dp.message_handler(commands=['today'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/today') == False:
        await noAccessMessage(message)
        return 0

    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    group = groups.getCode(str(group))

    result = help_today(str(group))
    await message.answer(text=result)

@dp.message_handler(commands=['date'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/date') == False:
        await noAccessMessage(message)
        return 0

    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    group = groups.getCode(str(group))

    result = help_date(str(group), message.text.replace("/date ", ""))
    await message.answer(text=result)

@dp.message_handler(commands=['tomorrow'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/tomorrow') == False:
        await noAccessMessage(message)
        return 0

    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    group = groups.getCode(str(group))

    result = help_tomorrow(str(group))
    await message.answer(text=result)

@dp.message_handler(commands=['week'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/week') == False:
        await noAccessMessage(message)
        return 0

    group = users.get(users.getAccess(message.from_user.id), message.from_user.id, 'group')

    if group == 'None':
        await invalidGroupMessage(message)
        return 0

    group = groups.getCode(str(group))

    result = help_week(str(group))
    await message.answer(text=result)

@dp.message_handler(commands=['send'])
async def echohelp(message: Message):
    await mDebug(message)

    if users.checkUser(message.from_user.id) == False:
        await registerMessage(message)
        return 0

    if users.checkCommand(message.from_user.id, '/send') == False:
        await noAccessMessage(message)
        return 0

    messages.push(message)

    text_message = message.text.replace("/send ", "")

    text = f"‚ÅâMessage:\nusername = @{message.from_user.username} name = {message.from_user.first_name} chat_id = {message.chat.id} user_id = {message.from_user.id}\nMessage: {text_message}"
    await bot.send_message(chat_id=admin_id, text=text)

    await message.answer(text='–ê–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!')

@dp.message_handler(content_types=ContentType.TEXT)
async def echoMessage(message: Message):
    await mDebug(message)

    if chats.checkChat(message.chat.id) == False:
        chats.addChat(message.chat.id)

        await bot.send_message(chat_id=message.chat.id, text="–ö–Ω–æ–ø–∫–∏:", reply_markup=keyboard.keyboard)
